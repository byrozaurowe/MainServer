// automatically generated by the FlatBuffers compiler, do not modify

package TestData;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Tester extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Tester getRootAsTester(ByteBuffer _bb) { return getRootAsTester(_bb, new Tester()); }
  public static Tester getRootAsTester(ByteBuffer _bb, Tester obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Tester __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TestData.Vec3 pos() { return pos(new TestData.Vec3()); }
  public TestData.Vec3 pos(TestData.Vec3 obj) { int o = __offset(4); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public int someInteger() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 123; }
  public String someString() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer someStringAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer someStringInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static void startTester(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addPos(FlatBufferBuilder builder, int posOffset) { builder.addStruct(0, posOffset, 0); }
  public static void addSomeInteger(FlatBufferBuilder builder, int someInteger) { builder.addInt(1, someInteger, 123); }
  public static void addSomeString(FlatBufferBuilder builder, int someStringOffset) { builder.addOffset(2, someStringOffset, 0); }
  public static int endTester(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTesterBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedTesterBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Tester get(int j) { return get(new Tester(), j); }
    public Tester get(Tester obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

