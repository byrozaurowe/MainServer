// automatically generated by the FlatBuffers compiler, do not modify

package mainServer.schemas.FClient;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class FClient extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static FClient getRootAsFClient(ByteBuffer _bb) { return getRootAsFClient(_bb, new FClient()); }
  public static FClient getRootAsFClient(ByteBuffer _bb, FClient obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FClient __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String ipAddress() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ipAddressAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer ipAddressInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createFClient(FlatBufferBuilder builder,
      int nameOffset,
      int ipAddressOffset) {
    builder.startTable(2);
    FClient.addIpAddress(builder, ipAddressOffset);
    FClient.addName(builder, nameOffset);
    return FClient.endFClient(builder);
  }

  public static void startFClient(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addIpAddress(FlatBufferBuilder builder, int ipAddressOffset) { builder.addOffset(1, ipAddressOffset, 0); }
  public static int endFClient(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFClientBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedFClientBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FClient get(int j) { return get(new FClient(), j); }
    public FClient get(FClient obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

