// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEID_MAINSERVER_SCHEMAS_FGAMEID_H_
#define FLATBUFFERS_GENERATED_GAMEID_MAINSERVER_SCHEMAS_FGAMEID_H_

#include "flatbuffers/flatbuffers.h"

namespace mainServer {
namespace schemas {
namespace FGameId {

struct FGameId;
struct FGameIdBuilder;

struct FGameId FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FGameIdBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           verifier.EndTable();
  }
};

struct FGameIdBuilder {
  typedef FGameId Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(FGameId::VT_ID, id, 0);
  }
  explicit FGameIdBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FGameIdBuilder &operator=(const FGameIdBuilder &);
  flatbuffers::Offset<FGameId> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FGameId>(end);
    return o;
  }
};

inline flatbuffers::Offset<FGameId> CreateFGameId(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0) {
  FGameIdBuilder builder_(_fbb);
  builder_.add_id(id);
  return builder_.Finish();
}

inline const mainServer::schemas::FGameId::FGameId *GetFGameId(const void *buf) {
  return flatbuffers::GetRoot<mainServer::schemas::FGameId::FGameId>(buf);
}

inline const mainServer::schemas::FGameId::FGameId *GetSizePrefixedFGameId(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<mainServer::schemas::FGameId::FGameId>(buf);
}

inline bool VerifyFGameIdBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mainServer::schemas::FGameId::FGameId>(nullptr);
}

inline bool VerifySizePrefixedFGameIdBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mainServer::schemas::FGameId::FGameId>(nullptr);
}

inline void FinishFGameIdBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mainServer::schemas::FGameId::FGameId> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFGameIdBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mainServer::schemas::FGameId::FGameId> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FGameId
}  // namespace schemas
}  // namespace mainServer

#endif  // FLATBUFFERS_GENERATED_GAMEID_MAINSERVER_SCHEMAS_FGAMEID_H_
