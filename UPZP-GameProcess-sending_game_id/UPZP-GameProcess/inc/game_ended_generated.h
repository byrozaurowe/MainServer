// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMEENDED_MAINSERVER_SCHEMAS_FGAMEENDED_H_
#define FLATBUFFERS_GENERATED_GAMEENDED_MAINSERVER_SCHEMAS_FGAMEENDED_H_

#include "flatbuffers/flatbuffers.h"

namespace mainServer {
namespace schemas {
namespace FGameEnded {

struct FGameEnded;
struct FGameEndedBuilder;

struct FGameEnded FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FGameEndedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ENDED = 4
  };
  bool ended() const {
    return GetField<uint8_t>(VT_ENDED, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ENDED) &&
           verifier.EndTable();
  }
};

struct FGameEndedBuilder {
  typedef FGameEnded Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ended(bool ended) {
    fbb_.AddElement<uint8_t>(FGameEnded::VT_ENDED, static_cast<uint8_t>(ended), 0);
  }
  explicit FGameEndedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FGameEndedBuilder &operator=(const FGameEndedBuilder &);
  flatbuffers::Offset<FGameEnded> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FGameEnded>(end);
    return o;
  }
};

inline flatbuffers::Offset<FGameEnded> CreateFGameEnded(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool ended = false) {
  FGameEndedBuilder builder_(_fbb);
  builder_.add_ended(ended);
  return builder_.Finish();
}

inline const mainServer::schemas::FGameEnded::FGameEnded *GetFGameEnded(const void *buf) {
  return flatbuffers::GetRoot<mainServer::schemas::FGameEnded::FGameEnded>(buf);
}

inline const mainServer::schemas::FGameEnded::FGameEnded *GetSizePrefixedFGameEnded(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<mainServer::schemas::FGameEnded::FGameEnded>(buf);
}

inline bool VerifyFGameEndedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mainServer::schemas::FGameEnded::FGameEnded>(nullptr);
}

inline bool VerifySizePrefixedFGameEndedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mainServer::schemas::FGameEnded::FGameEnded>(nullptr);
}

inline void FinishFGameEndedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mainServer::schemas::FGameEnded::FGameEnded> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFGameEndedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mainServer::schemas::FGameEnded::FGameEnded> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FGameEnded
}  // namespace schemas
}  // namespace mainServer

#endif  // FLATBUFFERS_GENERATED_GAMEENDED_MAINSERVER_SCHEMAS_FGAMEENDED_H_
