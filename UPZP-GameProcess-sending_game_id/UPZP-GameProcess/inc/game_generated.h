// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAME_MAINSERVER_SCHEMAS_FGAME_H_
#define FLATBUFFERS_GENERATED_GAME_MAINSERVER_SCHEMAS_FGAME_H_

#include "flatbuffers/flatbuffers.h"

namespace mainServer {
namespace schemas {
namespace FGame {

struct FVehicle;
struct FVehicleBuilder;

struct FClient;
struct FClientBuilder;

struct FTeam;
struct FTeamBuilder;

struct FGame;
struct FGameBuilder;

enum FVehicleType {
  FVehicleType_Pedestrian = 0,
  FVehicleType_Cyclist = 1,
  FVehicleType_Car = 2,
  FVehicleType_MIN = FVehicleType_Pedestrian,
  FVehicleType_MAX = FVehicleType_Car
};

inline const FVehicleType (&EnumValuesFVehicleType())[3] {
  static const FVehicleType values[] = {
    FVehicleType_Pedestrian,
    FVehicleType_Cyclist,
    FVehicleType_Car
  };
  return values;
}

inline const char * const *EnumNamesFVehicleType() {
  static const char * const names[4] = {
    "Pedestrian",
    "Cyclist",
    "Car",
    nullptr
  };
  return names;
}

inline const char *EnumNameFVehicleType(FVehicleType e) {
  if (flatbuffers::IsOutRange(e, FVehicleType_Pedestrian, FVehicleType_Car)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFVehicleType()[index];
}

struct FVehicle FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FVehicleBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VEHICLETYPE = 4
  };
  mainServer::schemas::FGame::FVehicleType vehicleType() const {
    return static_cast<mainServer::schemas::FGame::FVehicleType>(GetField<int8_t>(VT_VEHICLETYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_VEHICLETYPE) &&
           verifier.EndTable();
  }
};

struct FVehicleBuilder {
  typedef FVehicle Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vehicleType(mainServer::schemas::FGame::FVehicleType vehicleType) {
    fbb_.AddElement<int8_t>(FVehicle::VT_VEHICLETYPE, static_cast<int8_t>(vehicleType), 0);
  }
  explicit FVehicleBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FVehicleBuilder &operator=(const FVehicleBuilder &);
  flatbuffers::Offset<FVehicle> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FVehicle>(end);
    return o;
  }
};

inline flatbuffers::Offset<FVehicle> CreateFVehicle(
    flatbuffers::FlatBufferBuilder &_fbb,
    mainServer::schemas::FGame::FVehicleType vehicleType = mainServer::schemas::FGame::FVehicleType_Pedestrian) {
  FVehicleBuilder builder_(_fbb);
  builder_.add_vehicleType(vehicleType);
  return builder_.Finish();
}

struct FClient FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ID = 6,
    VT_IPADDRESS = 8,
    VT_PORT = 10,
    VT_VEHICLE = 12
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *ipAddress() const {
    return GetPointer<const flatbuffers::String *>(VT_IPADDRESS);
  }
  int32_t port() const {
    return GetField<int32_t>(VT_PORT, 0);
  }
  const mainServer::schemas::FGame::FVehicle *vehicle() const {
    return GetPointer<const mainServer::schemas::FGame::FVehicle *>(VT_VEHICLE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_IPADDRESS) &&
           verifier.VerifyString(ipAddress()) &&
           VerifyField<int32_t>(verifier, VT_PORT) &&
           VerifyOffset(verifier, VT_VEHICLE) &&
           verifier.VerifyTable(vehicle()) &&
           verifier.EndTable();
  }
};

struct FClientBuilder {
  typedef FClient Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(FClient::VT_NAME, name);
  }
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(FClient::VT_ID, id, 0);
  }
  void add_ipAddress(flatbuffers::Offset<flatbuffers::String> ipAddress) {
    fbb_.AddOffset(FClient::VT_IPADDRESS, ipAddress);
  }
  void add_port(int32_t port) {
    fbb_.AddElement<int32_t>(FClient::VT_PORT, port, 0);
  }
  void add_vehicle(flatbuffers::Offset<mainServer::schemas::FGame::FVehicle> vehicle) {
    fbb_.AddOffset(FClient::VT_VEHICLE, vehicle);
  }
  explicit FClientBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FClientBuilder &operator=(const FClientBuilder &);
  flatbuffers::Offset<FClient> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FClient>(end);
    return o;
  }
};

inline flatbuffers::Offset<FClient> CreateFClient(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> ipAddress = 0,
    int32_t port = 0,
    flatbuffers::Offset<mainServer::schemas::FGame::FVehicle> vehicle = 0) {
  FClientBuilder builder_(_fbb);
  builder_.add_vehicle(vehicle);
  builder_.add_port(port);
  builder_.add_ipAddress(ipAddress);
  builder_.add_id(id);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<FClient> CreateFClientDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint32_t id = 0,
    const char *ipAddress = nullptr,
    int32_t port = 0,
    flatbuffers::Offset<mainServer::schemas::FGame::FVehicle> vehicle = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto ipAddress__ = ipAddress ? _fbb.CreateString(ipAddress) : 0;
  return mainServer::schemas::FGame::CreateFClient(
      _fbb,
      name__,
      id,
      ipAddress__,
      port,
      vehicle);
}

struct FTeam FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FTeamBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<mainServer::schemas::FGame::FClient>> *clients() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<mainServer::schemas::FGame::FClient>> *>(VT_CLIENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENTS) &&
           verifier.VerifyVector(clients()) &&
           verifier.VerifyVectorOfTables(clients()) &&
           verifier.EndTable();
  }
};

struct FTeamBuilder {
  typedef FTeam Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_clients(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<mainServer::schemas::FGame::FClient>>> clients) {
    fbb_.AddOffset(FTeam::VT_CLIENTS, clients);
  }
  explicit FTeamBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FTeamBuilder &operator=(const FTeamBuilder &);
  flatbuffers::Offset<FTeam> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FTeam>(end);
    return o;
  }
};

inline flatbuffers::Offset<FTeam> CreateFTeam(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<mainServer::schemas::FGame::FClient>>> clients = 0) {
  FTeamBuilder builder_(_fbb);
  builder_.add_clients(clients);
  return builder_.Finish();
}

inline flatbuffers::Offset<FTeam> CreateFTeamDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<mainServer::schemas::FGame::FClient>> *clients = nullptr) {
  auto clients__ = clients ? _fbb.CreateVector<flatbuffers::Offset<mainServer::schemas::FGame::FClient>>(*clients) : 0;
  return mainServer::schemas::FGame::CreateFTeam(
      _fbb,
      clients__);
}

struct FGame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FGameBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TEAMS = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<mainServer::schemas::FGame::FTeam>> *teams() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<mainServer::schemas::FGame::FTeam>> *>(VT_TEAMS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_TEAMS) &&
           verifier.VerifyVector(teams()) &&
           verifier.VerifyVectorOfTables(teams()) &&
           verifier.EndTable();
  }
};

struct FGameBuilder {
  typedef FGame Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(FGame::VT_ID, id, 0);
  }
  void add_teams(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<mainServer::schemas::FGame::FTeam>>> teams) {
    fbb_.AddOffset(FGame::VT_TEAMS, teams);
  }
  explicit FGameBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FGameBuilder &operator=(const FGameBuilder &);
  flatbuffers::Offset<FGame> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FGame>(end);
    return o;
  }
};

inline flatbuffers::Offset<FGame> CreateFGame(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<mainServer::schemas::FGame::FTeam>>> teams = 0) {
  FGameBuilder builder_(_fbb);
  builder_.add_teams(teams);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<FGame> CreateFGameDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const std::vector<flatbuffers::Offset<mainServer::schemas::FGame::FTeam>> *teams = nullptr) {
  auto teams__ = teams ? _fbb.CreateVector<flatbuffers::Offset<mainServer::schemas::FGame::FTeam>>(*teams) : 0;
  return mainServer::schemas::FGame::CreateFGame(
      _fbb,
      id,
      teams__);
}

inline const mainServer::schemas::FGame::FGame *GetFGame(const void *buf) {
  return flatbuffers::GetRoot<mainServer::schemas::FGame::FGame>(buf);
}

inline const mainServer::schemas::FGame::FGame *GetSizePrefixedFGame(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<mainServer::schemas::FGame::FGame>(buf);
}

inline bool VerifyFGameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mainServer::schemas::FGame::FGame>(nullptr);
}

inline bool VerifySizePrefixedFGameBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mainServer::schemas::FGame::FGame>(nullptr);
}

inline void FinishFGameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mainServer::schemas::FGame::FGame> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFGameBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mainServer::schemas::FGame::FGame> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FGame
}  // namespace schemas
}  // namespace mainServer

#endif  // FLATBUFFERS_GENERATED_GAME_MAINSERVER_SCHEMAS_FGAME_H_
