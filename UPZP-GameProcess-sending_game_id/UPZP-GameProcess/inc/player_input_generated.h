// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PLAYERINPUT_UPZP_PLAYERINPUT_H_
#define FLATBUFFERS_GENERATED_PLAYERINPUT_UPZP_PLAYERINPUT_H_

#include "flatbuffers/flatbuffers.h"

namespace Upzp {
namespace PlayerInput {

struct Input;
struct InputBuilder;

/// Player's input.
struct Input FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef InputBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEQUENCE = 4,
    VT_ID = 6,
    VT_DISCONNECT = 8,
    VT_DIRECTION = 10,
    VT_MOVE = 12
  };
  uint64_t sequence() const {
    return GetField<uint64_t>(VT_SEQUENCE, 0);
  }
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  bool disconnect() const {
    return GetField<uint8_t>(VT_DISCONNECT, 0) != 0;
  }
  float direction() const {
    return GetField<float>(VT_DIRECTION, 0.0f);
  }
  bool move() const {
    return GetField<uint8_t>(VT_MOVE, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_SEQUENCE) &&
           VerifyField<uint32_t>(verifier, VT_ID) &&
           VerifyField<uint8_t>(verifier, VT_DISCONNECT) &&
           VerifyField<float>(verifier, VT_DIRECTION) &&
           VerifyField<uint8_t>(verifier, VT_MOVE) &&
           verifier.EndTable();
  }
};

struct InputBuilder {
  typedef Input Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_sequence(uint64_t sequence) {
    fbb_.AddElement<uint64_t>(Input::VT_SEQUENCE, sequence, 0);
  }
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Input::VT_ID, id, 0);
  }
  void add_disconnect(bool disconnect) {
    fbb_.AddElement<uint8_t>(Input::VT_DISCONNECT, static_cast<uint8_t>(disconnect), 0);
  }
  void add_direction(float direction) {
    fbb_.AddElement<float>(Input::VT_DIRECTION, direction, 0.0f);
  }
  void add_move(bool move) {
    fbb_.AddElement<uint8_t>(Input::VT_MOVE, static_cast<uint8_t>(move), 0);
  }
  explicit InputBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Input> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Input>(end);
    return o;
  }
};

inline flatbuffers::Offset<Input> CreateInput(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t sequence = 0,
    uint32_t id = 0,
    bool disconnect = false,
    float direction = 0.0f,
    bool move = false) {
  InputBuilder builder_(_fbb);
  builder_.add_sequence(sequence);
  builder_.add_direction(direction);
  builder_.add_id(id);
  builder_.add_move(move);
  builder_.add_disconnect(disconnect);
  return builder_.Finish();
}

inline const Upzp::PlayerInput::Input *GetInput(const void *buf) {
  return flatbuffers::GetRoot<Upzp::PlayerInput::Input>(buf);
}

inline const Upzp::PlayerInput::Input *GetSizePrefixedInput(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Upzp::PlayerInput::Input>(buf);
}

inline bool VerifyInputBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Upzp::PlayerInput::Input>(nullptr);
}

inline bool VerifySizePrefixedInputBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Upzp::PlayerInput::Input>(nullptr);
}

inline void FinishInputBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Upzp::PlayerInput::Input> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInputBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Upzp::PlayerInput::Input> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace PlayerInput
}  // namespace Upzp

#endif  // FLATBUFFERS_GENERATED_PLAYERINPUT_UPZP_PLAYERINPUT_H_
